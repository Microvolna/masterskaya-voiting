"""–ë–æ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª–µ.

Version: 0.1
"""

import asyncio
from typing import Callable, Awaitable, Any

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message, Update, ErrorEvent,
                           SwitchInlineQueryChosenChat)
from loguru import logger

import config


dp = Dispatcher()


## –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–æ—Ç–µ
## –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
@dp.message.middleware()
@dp.callback_query.middleware()
async def log_middleware(
    handler: Callable[[Update, dict[str, Any]], Awaitable[Any]],
    event: Update,
    data: dict[str, Any],
) -> Any:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback query."""
    if isinstance(event, CallbackQuery):
        logger.info("[c] {}: {}", event.message.from_user.id, event.data)
    else:
        logger.info("[m] {}: {}", event.chat.id, event.text)

    return await handler(event, data)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∫–Ω–∫—Ü–∏–∏
# =======================

def get_vote_markup(posts: list[dict]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=ic(x["topic"]), callback_data=f"vote:{i}")]
        for i, x in enumerate(posts)
    ])


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
# ================================

@dp.message(Command("github"))
async def github_commend(message: Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞."""
    await message.answer((
        "üõ†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: "
        "https://github.com/Microvolna/masterskaya-voiting"
    ))

@dp.message(Command("start"))
async def start_command(message: Message, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª."""
    if str(message.from_user.id) == config.admin_id:
        await bot.send_message(config.chanel_id,
            config.message_text,
            reply_markup=get_vote_markup(config.posts)
        )
        await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("üëãüòåüåÑ –ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@dp.message(Command("send_post"))
async def send_post_command(message: Message, bot: Bot) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏–≤—à–∏–π –ø–æ—Å—Ç."""
    if str(message.from_user.id) == config.admin_id:
        send_post = config.posts[0]

        # –ü–æ–ª—É—á–µ–º –ø–æ—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –≥–æ–ª–æ—Å–æ–≤
        for post in config.posts[1:]:
            if len(post['vote']) > len(send_post['vote']):
                send_post = post

        await bot.send_message(config.chanel_id, send_post["text"])
        await message.answer(f"üìù –ü–æ—Å—Ç {send_post['topic']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    else:
        await message.answer("üëãüòåüåÑ –ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =================================

@dp.message(Command("stats"))
async def stats_commend(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."""
    text = "üåü –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
    total_votes = 0

    for i, x in enumerate(sorted(
        config.posts,
        key=lambda x: len(x["vote"]),
        reverse=True
    )):
        text += f"\n-- {i+1}. {x['topic']} -- {len(x['vote'])}"
        total_votes += len(x["vote"])

    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
# =====================

class VoteCallback(CallbackData, prefix="vote"):
    post_index: int

@dp.callback_query(VoteCallback.filter())
async def vote_callback(query: CallbackQuery, callback_data: VoteCallback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–∞."""
    selected_post = config.posts[callback_data.post_index]

    if query.from_user.id not in selected_post['vote']:
        selected_post['vote'].append(query.from_user.id)
        await query.answer(f"–í—ã üåü –∑–∞: {selected_post['topic']}")
    else:
        selected_post['vote'].remove(query.from_user.id)
        await query.answer(f"–û—Ç–º–µ–Ω–∞ üåü –∑–∞: {selected_post['topic']}")


@dp.errors()
async def error_handler(exception: ErrorEvent) -> None:
    """–õ–æ–≤–∏—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
    logger.exception(exception.exception)


async def main():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    bot = Bot(config.token)

    logger.info("Start polling ...")
    await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ============

if __name__ == "__main__":
    asyncio.run(main())
